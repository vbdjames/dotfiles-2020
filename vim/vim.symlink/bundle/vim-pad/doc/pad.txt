*vim-pad*    quick notetaking for vim

                                                    _
                        __ _ o  _  _     __  ___  __))
                        \(/'(( ((`1( -- ((_)((_( ((_(
                                         ))



vim-pad is a quick notetaking plugin for vim.

It offers a similar way of managing notes to the one made popular by tools
like Notational Velocity, where file management is removed from the notetaking
workflow, being replaced by searching and sorting facilities, and where the
creation and searching of notes is integrated.

NOTE vim-pad requires |+python|/|+python3| and |+conceal| support from vim.
Check if the flags are enabled in |:version|. Currently, it also requires
either a `grep` with perl regexes support, which might not be the case under
OSX, or `ack`, `ag` or `pt`. Windows is not supported.

If you have vim-tutor-mode[1] installed, you might want to read vim-pad's
tutorial:
>
    :Tutor pad
<

[1]: https://github.com/fmoralesc/vim-tutor-mode

- Global Commands |vim-pad-global-commands|
- List Commands |vim-pad-list-commands|
- In-Note Commands |vim-pad-note-commands|
- Configuration |vim-pad-configuration|
    - Notes Format |vim-pad-notes-format|
    - Misc |vim-pad-misc-config|
- Functions |vim-pad-functions|
- Rationale |vim-pad-design-rationale|


GLOBAL COMMANDS                                      *vim-pad-global-commands*
---------------

- *:Pad* is the main entry to using vim-pad. It can take three forms, as

                                                                     *:Pad-ls*

- :Pad ls (`<Control><Escape>`, `<leader><Escape>` for the terminal, global:
  `<Plug>(pad-list)`) which lists the notes. You can pass a string to it if
  you want to filter the notes.

The list of notes should display a series of lines like:

2 mins ago      | vim-pad is cool.↲ if you let me just say it.

The part before | should show when the note was last modified. For notes less
than a day old, the timestamp is displayed in a natural format, and after that
the timestamp follows the %Y-%m-%d %H:%M:%S format.

The first line of the file is taken as a title, and highlighted accordingly.
If the note only spans one line, the text before a dot or a comma is taken as
the title instead. Line breaks are displayed as ↲.

                                                                 *:Pad-search*
:Pad search (`<leader>ss` in normal mode, global: `<Plug>(pad-search)`) also
calls `Pad ls`, but it prompts  for a query to filter the notes before
presenting the list. Giving an empty query is equivalent to calling `Pad ls`
without arguments.

By default, `Pad ls` won't show notes from the archive. To list them, you must
pass a bang to the command:

     :Pad! ls
                                                                    *:Pad-new*

- :Pad new (`<Shift><Escape>`, `<leader>n` in the terminal, global:
  `<Plug>(pad-new)`) creates a new note.

If a string is given as its argument, it will insert the text as the first
line in the file.

If the :Pad command includes a bang (i.e. `:Pad! new`), a local note is
created.

                                                                   *:Pad-this*

- `:Pad this` creates a new note in a local dir (defined by *g:pad#local_dir* ),
  based on the current file. The created file has a FNAME.txt name. For
  example, if |g:pad#local_dir| is "notes", and the user is editing the file
  "~/devel/awesome.vim", a note will be created on
  "~/devel/notes/awesome.vim.txt".

LIST COMMANDS                                         *vim-pad-list-commands*
-------------

When in the notes list, you can open a note pressing `<Enter>` and delete it
using `<Del>` (`dd` in the terminal ). `<Escape>` closes the buffer.

You can start a search among your notes pressing `<Shift-F>`in the list. This
will update the buffer in real time. If the query doesn't match any of the
existing files, pressing `Enter` will create a new note with the query
inserted in the first line.

You can move the selected note to a subfolder by pressing `<localleader>+f`.
vim.pad will prompt you for the folder name. To move a note to the root
directory (|g:pad#dir|), press `<localleader>-f`. Likewise, to move a note to
the archive, press `<localleader>+a`, and `<localleader>-a` to move it back.

You can sort the notes in the current view by title, tags or date by pressing
`<Shift-S>` and selecting the mode.

IN-NOTE COMMANDS                                      *vim-pad-note-commands*
----------------

From a note, you can press `<localleader>dd` to delete it. `<localleader>+m`
will ask for a filetype and insert a modeline in the file accordingly.

The folder and archive mappings listed above (`<localleader>+f` and such) also
work inside notes.

CONFIGURATION                                         *vim-pad-configuration*
-------------

NOTE FOR WINDOWS USERS: The plugin will not work correctly unless `encoding` is
set to `utf-8` in your vimrc. Minimal compatibility for latin1 has been
provided, though (the plugin will load, but render incorrectly).

NOTE IMPORTANT: set the *g:pad#dir* variable in your .vimrc, to indicate where the
notes will be saved. The default is:

    let g:pad#dir = "~/notes/"

If the path is invalid (is not writeable or doesn't exist), vim-pad will nag
you to set a valid one.

NOTE FOR WINDOWS USERS: The pathname escaping is different in Windows. You
might need to escape backward slashes, like so:

    let g:pad#dir = "C:\\Users\\Foo\\Documents\\Notes"

MAPPINGS                                                   *vim-pad-mappings*

By default, vim-pad sets some global mappings in normal mode. You can disable
those by setting *g:pad#set_mappings* to 0. If you also want to map vim-pad's
functions in insert mode, set this variable to a value of 2.

Finer grained configuration of the default mappings can be done by setting

    *g:pad#maps#list*           default = ["<leader><esc>", "<C-Esc>"]
    *g:pad#maps#new*                    = ["<leader>n", "<S-Esc>"]
    *g:pad#maps#search*                 = "<leader>ss"
    *g:pad#maps#incsearch*              = "<leader>s<leader>"
    *g:pad#maps#newsilent*              = "<leader>s!"

To set different maps in the terminal and in the GUI, use a list (like in
|g:pad#maps#list| above), where the first item will be used for the terminal
and the second for the GUI. If any of these variables is a string, the same
value will be used for both.

vim-pad will notice if the mappings have conflicts and warn you. If you want
to disable these messages, set *g:pad#silent_on_mappings_fail* to 1.

If you disable the defaults, you'll have to remap the following mappings:

    <Plug>(pad-list)                     " open the notes list
    <Plug>(pad-new)                      " create a new note
    <Plug>(pad-search)                   " search for a note
    <Plug>(pad-incremental-search)       " search incrementally for a note
    <Plug>(pad-incremental-new-note)     " create a new note with incremental search

For example,

    nmap <leader>pl <Plug>(pad-list)

will map <leader>pl to opening the notes list.

NOTES FORMAT                                           *vim-pad-notes-format*

The default format for new notes is `markdown`. To change this to other
format, `pandoc` for example, put

    let *g:pad#default_format* = "pandoc"

in your `.vimrc`. You can also set the individual format of a note by adding
the corresponding modeline. For example,

        <!-- vim: set ft=votl: -->

at the beggining or the end of a file will tell vim to open the file as a
VimOutliner file. The modeline won't be shown in the list view.

The position modelines are inserted in a file when using pad#AddModeline is
determined by the value of *g:pad#modeline_position* . The default is
`bottom`, which means that it will be inserted at the end of the file. A value
of `top` means that it will be inserted in the first line of the file.

You can also set the *g:pad#default_file_extension* variable. This will give
all newly saved notes the given file extension (can be useful when
interoperating with apps that don't recognize modelines).

MISC                                                   *vim-pad-misc-config*

The height of the split windows this plugin uses can be set with
*g:pad#window_height* (the default is 8).

Notes are opened by default in a split window the same height as the __Pad__
buffer. If you want to open the notes in the main window, set
*g:pad#open_in_split* to 0.

vim-pad's list is opened at the bottom by default. If you want to open it at
the right side of the window, you must change the value of
*g:pad#position["list"]* to "right" (the default is "bottom"). You can also
make it cover the whole screen setting that to "full". Also, you can set the
window width with *g:pad#window_width* (default: 40). When vim-pad is opened
this way, the timestamp is hidden.  Likewise, you can tell vim-pad to open the
notes at the right side of the window by setting the value of
*g:pad#position["pads"]* to "right".

vim-pad can search using either `grep`,  `ack`, `ag` (the silver searcher), or
`pt` (the platinum searcher). grep is the default. You can set this using the
*g:pad#search_backend* variable. By default, the search ignores case (adjust
*g:pad#search_ignore_case* as desired).

NOTE FOR WINDOWS USERS: You will need a GNU grep compatible executable
in your $PATH in order to search. Cygwin's version has been tested succesfully.

vim-pad can also query directory and filename queries. For the first, it will
add all files in a folder matching the query. The second simply adds files
that match the query; it can be useful when file renaming is disabled (see
|g:pad#rename_files|. You can adjust these behaviors through the
*g:pad#query_dirnames* (default=1) and *g:pad#query_filenames* (default=0).

Some files vim-pad might find can be unsupported by vim (e.g., pdfs in the
notes folder). These are filtered out by default. You can control which
extensions to ignore using *g:pad#ignored_extensions* (defaults to ["pdf",
"odt", "docx", "doc"]).

When showing the list of notes, vim-pad reads by default 200 chars from the
files, in order to show a summary of the file. You can adjust how many chars
you want vim-pad to read by setting the *g:pad#read_nchars_from_files* variable.

If you want the notes title to be their first line, you can set
*g:pad#title_first_line* to 1 (default is 0)

If you want to display in the list of notes the file names instead, set both
g:pad#read_nchars_from_files and g:pad#title_first_line to 0.

vim-pad renames files to reflect their contents, using a file name similar to
the note title. The renames are done automatically when you leave/close a note.
If you do not want vim-pad to rename the files you can set *g:pad#rename_files*
to 0.

Directories can be excluded from being searched by setting
*g:pad#exclude_dirnames* to a comma separated string of directory names. e.g.:

    let g:pad#exclude_dirnames = "img,assets"

In the above example, directories with the names `img` or `assets` will be
ignored anywhere in the directory heirarchy.  This is useful if you want to
include media and non-text files in your notes directory.

FUNCTIONS                                              *vim-pad-functions*
---------

- *pad#PadCmd()*               main entry
- *pad#OpenPad()*              creates a new note.
- *pad#ListPads()*             displays the list of notes.
- *pad#SearchPads(query)*      shows the search note prompt

RATIONALE                                              *vim-pad-design-rationale*
---------

vim-pad has as its goals:

- Abstract file management away from notetaking. You shouldn't have to think
  about where to put your notes and how to name them.
- Make input and retrieval of notes as fast as possible. Searching for a note
  should be easy.
- Make notetaking as effortless as possible, trying never to disrupt your
  workflow more than necessary.

vim-pad tries to reach them by setting up a certain (opinionated) workflow for
notetaking. Besides mapping itself so search, listing and creation of notes is
never more than a few keypresses away, it abstracts file management by keeping
your notes in a single place, renaming files when they changed (this way,
filenames should reflect the note content).

vim-pad doesn't specify a format for your notes. Instead, it uses a default,
which you can configure, and incentives the use of modelines. This means that
your notes can be free-form and adapt to your needs, and also, that you can use
vim-pad as a complement for other note taking plugins (it works great along
other plugins like [VimOutliner](https://github.com/vimoutliner/vimoutliner/)
and [quicktask](https://github.com/aaronbieber/quicktask).)

" vim: set ft=help:
